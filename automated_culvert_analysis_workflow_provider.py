# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AutomatedCulvertAnalysisWorkflow
                                 A QGIS plugin
 Culvert Identification and Characterization from Remote Sensing Data.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-24
        copyright            : (C) 2024 by Water Resources Solutions, LLC
        email                : asprague@wrs-r.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Water Resources Solutions, LLC'
__date__ = '2024-09-24'
__copyright__ = '(C) 2024 by Water Resources Solutions, LLC'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.core import QgsProcessingProvider
from .processing_algs.MoACAW_Process_1 import Process1
from .processing_algs.MoACAW_Process_2 import Process2
from .processing_algs.MoACAW_Process_3 import Process3
from .processing_algs.MoACAW_Process_4 import Process4
from .processing_algs.sub_algs.samplerastervalues import SampleRasterValues
from .processing_algs.sub_algs.polygonizeFolder import PolygonizeFolder
from .processing_algs.sub_algs.mergeLfpFolder import MergeLfpFolder
from .processing_algs.sub_algs.wbtLfpFolder import WbtLfpFolder


from qgis.PyQt.QtGui import QIcon
pluginPath = os.path.dirname(__file__)


class AutomatedCulvertAnalysisWorkflowProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        self.addAlgorithm(Process1())
        self.addAlgorithm(Process2())
        self.addAlgorithm(Process3())
        self.addAlgorithm(Process4())
        self.addAlgorithm(SampleRasterValues())
        self.addAlgorithm(PolygonizeFolder())
        self.addAlgorithm(MergeLfpFolder())
        self.addAlgorithm(WbtLfpFolder())

        # add additional algorithms here
        # self.addAlgorithm(MyOtherAlgorithm())

    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return 'MoACAW'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr('Automated Culvert Analysis Workflow')

    def icon(self):
        return QIcon(os.path.join(pluginPath, "icons", "icon.svg"))

    def svgIconPath(self):
        return os.path.join(pluginPath, "icons", "icon.svg")

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
